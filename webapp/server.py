import json
import os
import hmac
import hashlib
import tornado.httpserver
import tornado.ioloop
import tornado.web
from gitapi import Githandler
from scanner import Scanner
from settings import REPO_BASE_DIR, HOOK_SECRET_KEY
from dbhandler import MongoHandler


def _clone_project(json_body):
    """
    clone the project from repo
    :param json_body: json request body
    :return:
    """
    repo_name = json_body['repository']['name']
    repo_path = '%s/%s' % (REPO_BASE_DIR, repo_name)
    repo_clone_url = json_body['repository']['clone_url']
    try:
        os.system('rm -rf %s' % repo_path)
        os.system('git clone %s %s' % (repo_clone_url, repo_path))
        os.system('cd %s' % REPO_BASE_DIR)
    except Exception as e:
        print(e)
    return repo_path


def _scanned_commits(full_name):
    """
    Find all previously scanned commits and return the list
    :param full_name: repo path
    :return: list if already scanned commits
    """
    mongo_handler = MongoHandler()
    return mongo_handler.get_data(full_name)


class CommitHandler(tornado.web.RequestHandler):

    def get(self):
        full_name = self.get_query_argument('project')
        if not full_name:
            self.finish('project is required')
            return
        mongo_handler = MongoHandler()
        res = json.dumps(mongo_handler.get_data(full_name))
        self.finish(res)


class MainHandler(tornado.web.RequestHandler):
    def _validate_signature(self, data):
        sha_name, signature = self.request.headers['X-Hub-Signature'].split('=')
        if sha_name != 'sha1':
            return False

        # HMAC requires its key to be bytes, but data is strings.
        mac = hmac.new(HOOK_SECRET_KEY, msg=data, digestmod=hashlib.sha1)
        return mac.hexdigest() == signature

    def get(self):
        self.write("Vulnerability Scanner")

    def post(self):
        print(self.request.body)
        json_body = json.loads(self.request.body)
        action = json_body['action']
        if not self._validate_signature(self.request.body):
            print('Signature not verified')
            self.set_status(403)
            self.finish("Un authorized")
            return
        if action != 'opened' and action != 'synchronize':
            print('not scanning, reason: action=%s' % action)
            self.finish("Success!")
            return
        repo_path = _clone_project(json_body)
        pr_number = json_body['number']
        full_name = json_body['repository']['full_name']
        api_handler = Githandler()
        commits = api_handler.get_commits_sha(pr_number, full_name)
        commits_scanned = _scanned_commits(full_name)
        print commits
        if not commits:
            print('No commits..')
            self.finish("Success!")
            return
        for commit_sha in commits:
            if commit_sha in commits_scanned:
                continue
            try:
                os.system('cd %s && git checkout %s' % (repo_path, commit_sha))
            except Exception as e:
                print(e)
            files_details = api_handler.commit_reader(commit_sha, full_name)
            s = Scanner(repo_path, pr_number, commit_sha, full_name)
            count_of_vulrabilities = s.scan(files_details)
            # todo:
            mongo_handler = MongoHandler()
            mongo_handler.update_data(full_name=full_name, sha=commit_sha, vul_cnt=count_of_vulrabilities)
            print count_of_vulrabilities
        self.finish("Success!")

if __name__ == "__main__":
    application = tornado.web.Application([
        (r"/", MainHandler),
        (r"/commits", CommitHandler),
    ])
    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(9000)
    tornado.ioloop.IOLoop.instance().start()
