import re
import os
import json
from webapp import settings
from gitapi import Githandler


class Scanner(object):
    """
    Scanner to find vulnerability in code line by line
    """
    def __init__(self, repo_dir, pull_no, commit_sha, full_name):
        self.pull_no = pull_no
        self.commit_sha = commit_sha
        self.full_name = full_name
        self.repo_dir = repo_dir
        self.patterns = dict()

    def _get_patterns(self, file_extension):
        """
        find pattern for given extension
        :param file_extension: string - html, js, py php etc.,
        :return: Pattern for given extension
        """
        try:
            file_path = '%s/%s/%s.json' % (os.getcwd(), settings.REGEX_PATTERN_DIR, file_extension)
            if os.path.exists(file_path):
                f = open(file_path)
                pattern_str = f.read()
                f.close()
                self.patterns[file_extension] = json.loads(pattern_str)
            else:
                print('file not found :%s' % file_path)
                self.patterns[file_extension] = []
        except Exception as e:
            self.patterns[file_extension] = []
            print('Error loading patterns : %s' % e)

    def _match_file_regex(self, file_name, st_line, end_line, patterns):
        """
        match the given file line numbers aginst the regex pattern
        :param file_name: file name
        :param line_nos: line no of files changed
        :param pattern: regex pattern
        :return: True/ False
        """
        file_path = '%s/%s' % (self.repo_dir, file_name)
        try:
            with open(file_path) as f:
                file_contents = f.readlines()
        except Exception as e:
            print('Error reading file : %s, reason: %s' % (file_path, e))
            return 0

        file_count = 0
        for i in range(st_line-1, end_line):
            for regex in patterns:
                pattern = re.compile(regex['regex'])
                if pattern.match(file_contents[i]):
                    file_count += 1
                    print('File %s:%s - %s' % (file_name, i+1, regex['desc']))
                    api_handler = Githandler()
                    api_handler.commenter(line_no=i+1, pull_no=self.pull_no, msg=regex['desc'],
                                          sha=self.commit_sha, relative_file_path=file_name, full_name=self.full_name)
                    break
        return file_count

    def scan(self, file_path_details):
        """
        match the regex patterns against each line in specified list of files and call the commenter
        :param file_path_details: [{"file": "name", "st_line": 12, "no_of_lines": 3}, ... ]
        :return: None
        """
        commit_count = 0
        for file_detail in file_path_details:
            if len(file_detail['file'].split(".")) == 2:
                file_extension = file_detail['file'].split(".")[1]
            else:
                print('No pattern found for this file')
                return 0

            if file_extension not in self.patterns:
                self._get_patterns(file_extension)

            for file_details in file_path_details:
                end_line = file_details['st_line'] + file_details['no_of_lines'] - 1
                commit_count += self._match_file_regex(file_details['file'], file_details['st_line'], end_line,
                                                       self.patterns[file_extension])
        return commit_count


if __name__ == '__main__':
    s = Scanner('/tmp/repo')
    file_path_details = [{"file": "1.html", "st_line": 1, "no_of_lines": 2}]
    s.scan(file_path_details)
